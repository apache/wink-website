 -----
 Wink 0.1 Additional Features
 -----
 -----
 May 2009

~~
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~ 
~~ http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.
~~
 
Features Highlight
 
* Wink 0.1 Server additional features

  On top of the JAX-RS specification, Wink provides additional features that facilitate the development of RESTful Web services.
  This section contains a summary of the main additional features.
  For more detailed information regarding additional features, refer to {{{docs/Apache_Wink_User_Guide.pdf}Wink 0.1 Features List}} document
  
  * {{{Link Builders}Link Builders}}
  
  * {{{Assets}Assets}}
  
  * {{{Providers}Providers}}
  
  * {{{Data Models}Data Models}}
  
  * {{{APP Service Document}APP Service Document}}
  
  * {{{Wink Spring Integration}Wink Spring Integration}}
  
  * {{{WebDAV}WebDAV}}
  
  * {{{User Handlers}User Handlers}}
  
  * {{{Resource Continued Search Mode}Resource Continued Search Mode}}
  
  * {{{Scoping}Scoping}}
  
  
** {Link Builders}

	Wink 0.1 provides a mechanism that automatically generates all resource alternate links ("edit", "alternate" etc.) - one link per every supported media type. 
	This mechanism is useful, for example, for a application that exposes collection resource as Atom Feed, referencing all its alternate representations.
	
	In this example, resource "alternate" and "self" links will be generated automatically:

+--------------------------------------
<feed xmlns="http://www.w3.org/2005/Atom">
		...
    <link href="users" rel="self"/>
    <link href="users?alt=application%2Fatom%2Bxml" type="application/atom+xml" rel="alternate"/>
    <link href="users?alt=application%2Fjson" type="application/json" rel="alternate"/>
    <entry>
        ...
    </entry>
 </feed>
+--------------------------------------

** {Assets}

    Wink 0.1 introduces a new concept called Asset. Assets are POJO entities that can be returned by a resource method and can be injected to a resource method as an entity parameter.
    The purpose of the Asset concept is to simplify the resource development process.  

** {Providers}
   
    In addition to JAX-RS standard providers (JAX-RS specification, section 4.2), Wink 0.1 offers a set of complementary providers. 
    The purpose of these providers is to supply mapping services between various representations (for example Atom, APP, OpenSearch, CSV, JSON and HTML) 
    and their associated data models (see "Data Models" section).
    
** {Data Models}

	Wink 0.1 provides an out-of-the box implementation of the following data models: <JAXB>, <JSON>, <Syndication>, <Atom Publishing Protocol>, <CSV>, <OpenSearch>

	NOTICE: Along with these data models, Wink delivers providers for data models serialization/de-serialization (see "Providers" section). 

** {APP Service Document}

	Wink supports automatic and manual generation of APP Service Documents.

** {Wink Spring Integration}
	
	Wink has an integration with Spring Framework, delivering the following features: 
	
	*** An ability to register resources and providers from the Spring context.
	
	*** Use Spring to define the lifecycle of resources or providers that are registered as Spring beans
	
	*** Resources and providers can use Spring features like IoC, post-processors and so on.
	
	*** Wink customization via the Spring context. 
	  

** {WebDAV}

	Wink provides an extension module for supporting the WebDAV protocol. 
	The extension contains the complete WebDAV XML model and a WebDAV response builder for easing the process of creating a WebDAV multistatus response.

** {User Handlers}

	Wink utilizes three Handler Chains for the complete processing of a request: Request chain, Response chain and Error chain.
	User Handlers can be embedded into each chain, to customize a chains behavior and to add unique functionality to it.

** {Resource Continued Search Mode}

	Wink runtime provides a "Continued Search" mode when searching for a resource method. 
	According to JAX-RS specification only the first matching root resource and only the first matching sub-resource locator are selected 
	during the process of matching requests to resource methods. 
	This makes it impossible to implement certain use-cases, e.g having two resources anchored to the same URI, 
	each with its own set of supported methods.

** {Scoping}

	The JAX-RS specification defines the default lifecycle behavior for resources and providers, 
	and the option for controlling the lifecycle through the javax.ws.rs.core.Application class. 
	Wink provides the @Scope annotation to specify the lifecycle of a provider or resource.



